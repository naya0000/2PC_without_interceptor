// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.18.1
// source: airlineBooking/airlineBooking.proto

package airlineBooking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlightBooking_GetSeats_FullMethodName         = "/proto.FlightBooking/GetSeats"
	FlightBooking_ProposeBookSeats_FullMethodName = "/proto.FlightBooking/ProposeBookSeats"
	FlightBooking_CommitBookSeats_FullMethodName  = "/proto.FlightBooking/CommitBookSeats"
	FlightBooking_CancelBookSeats_FullMethodName  = "/proto.FlightBooking/CancelBookSeats"
)

// FlightBookingClient is the client API for FlightBooking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightBookingClient interface {
	GetSeats(ctx context.Context, in *GetSeatsRequest, opts ...grpc.CallOption) (*GetSeatsResponse, error)
	ProposeBookSeats(ctx context.Context, in *BookSeatsRequest, opts ...grpc.CallOption) (*BookSeatsResponse, error)
	CommitBookSeats(ctx context.Context, in *BookSeatsRequest, opts ...grpc.CallOption) (*BookSeatsResponse, error)
	CancelBookSeats(ctx context.Context, in *BookSeatsRequest, opts ...grpc.CallOption) (*BookSeatsResponse, error)
}

type flightBookingClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightBookingClient(cc grpc.ClientConnInterface) FlightBookingClient {
	return &flightBookingClient{cc}
}

func (c *flightBookingClient) GetSeats(ctx context.Context, in *GetSeatsRequest, opts ...grpc.CallOption) (*GetSeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatsResponse)
	err := c.cc.Invoke(ctx, FlightBooking_GetSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightBookingClient) ProposeBookSeats(ctx context.Context, in *BookSeatsRequest, opts ...grpc.CallOption) (*BookSeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookSeatsResponse)
	err := c.cc.Invoke(ctx, FlightBooking_ProposeBookSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightBookingClient) CommitBookSeats(ctx context.Context, in *BookSeatsRequest, opts ...grpc.CallOption) (*BookSeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookSeatsResponse)
	err := c.cc.Invoke(ctx, FlightBooking_CommitBookSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightBookingClient) CancelBookSeats(ctx context.Context, in *BookSeatsRequest, opts ...grpc.CallOption) (*BookSeatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookSeatsResponse)
	err := c.cc.Invoke(ctx, FlightBooking_CancelBookSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightBookingServer is the server API for FlightBooking service.
// All implementations must embed UnimplementedFlightBookingServer
// for forward compatibility.
type FlightBookingServer interface {
	GetSeats(context.Context, *GetSeatsRequest) (*GetSeatsResponse, error)
	ProposeBookSeats(context.Context, *BookSeatsRequest) (*BookSeatsResponse, error)
	CommitBookSeats(context.Context, *BookSeatsRequest) (*BookSeatsResponse, error)
	CancelBookSeats(context.Context, *BookSeatsRequest) (*BookSeatsResponse, error)
	mustEmbedUnimplementedFlightBookingServer()
}

// UnimplementedFlightBookingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlightBookingServer struct{}

func (UnimplementedFlightBookingServer) GetSeats(context.Context, *GetSeatsRequest) (*GetSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeats not implemented")
}
func (UnimplementedFlightBookingServer) ProposeBookSeats(context.Context, *BookSeatsRequest) (*BookSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBookSeats not implemented")
}
func (UnimplementedFlightBookingServer) CommitBookSeats(context.Context, *BookSeatsRequest) (*BookSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitBookSeats not implemented")
}
func (UnimplementedFlightBookingServer) CancelBookSeats(context.Context, *BookSeatsRequest) (*BookSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBookSeats not implemented")
}
func (UnimplementedFlightBookingServer) mustEmbedUnimplementedFlightBookingServer() {}
func (UnimplementedFlightBookingServer) testEmbeddedByValue()                       {}

// UnsafeFlightBookingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightBookingServer will
// result in compilation errors.
type UnsafeFlightBookingServer interface {
	mustEmbedUnimplementedFlightBookingServer()
}

func RegisterFlightBookingServer(s grpc.ServiceRegistrar, srv FlightBookingServer) {
	// If the following call pancis, it indicates UnimplementedFlightBookingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlightBooking_ServiceDesc, srv)
}

func _FlightBooking_GetSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightBookingServer).GetSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightBooking_GetSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightBookingServer).GetSeats(ctx, req.(*GetSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightBooking_ProposeBookSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightBookingServer).ProposeBookSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightBooking_ProposeBookSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightBookingServer).ProposeBookSeats(ctx, req.(*BookSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightBooking_CommitBookSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightBookingServer).CommitBookSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightBooking_CommitBookSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightBookingServer).CommitBookSeats(ctx, req.(*BookSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightBooking_CancelBookSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightBookingServer).CancelBookSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightBooking_CancelBookSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightBookingServer).CancelBookSeats(ctx, req.(*BookSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightBooking_ServiceDesc is the grpc.ServiceDesc for FlightBooking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightBooking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FlightBooking",
	HandlerType: (*FlightBookingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeats",
			Handler:    _FlightBooking_GetSeats_Handler,
		},
		{
			MethodName: "ProposeBookSeats",
			Handler:    _FlightBooking_ProposeBookSeats_Handler,
		},
		{
			MethodName: "CommitBookSeats",
			Handler:    _FlightBooking_CommitBookSeats_Handler,
		},
		{
			MethodName: "CancelBookSeats",
			Handler:    _FlightBooking_CancelBookSeats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airlineBooking/airlineBooking.proto",
}
